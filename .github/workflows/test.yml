name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/ -v --cov --cov-report=xml --cov-report=term

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests
        run: |
          cd frontend
          npm test

      - name: Build application
        run: |
          cd frontend
          npm run build

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    # Only run E2E tests on pull requests and main branch to save CI time
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps firefox

      - name: Start backend server
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          cd backend
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          echo "Waiting for backend to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:8000/docs > /dev/null; do sleep 1; done'
          echo "Backend is ready!"

      - name: Start frontend server
        env:
          VITE_API_URL: http://localhost:8000
          VITE_GOOGLE_CLIENT_ID: fake-google-client-id-for-testing
          VITE_WALLETCONNECT_PROJECT_ID: fake-walletconnect-id
        run: |
          cd frontend
          npm run dev &
          echo "Waiting for frontend to be ready..."
          timeout 30 bash -c 'until curl -s http://localhost:5173 > /dev/null; do sleep 1; done'
          echo "Frontend is ready!"

      - name: Debug - Check if page loads
        run: |
          echo "Testing frontend homepage..."
          curl -I http://localhost:5173
          echo "Testing login page..."
          curl http://localhost:5173/login | head -50

      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30
